Red [
	 "This file is generated by %bindgen.red from %sn-ffi.tpl.red" 
]

#system [
	
	buffer!: alias struct! [
		data [byte-ptr!]
		len [integer!]
	]


	#import [

		"sn_ffi/target/i686-unknown-linux-gnu/debug/libsn_ffi.so" cdecl [
		


	

	

	
			c_safe_address: "safe_address" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_balance: "safe_balance" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_connect: "safe_connect" [
				rt [int-ptr!] ;@@ TODO: async
				
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_download: "safe_download" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_login: "safe_login" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_login_with_eth: "safe_login_with_eth" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_log_level: "safe_log_level" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_read_reg: "safe_read_reg" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_reg_create: "safe_reg_create" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_reg_write: "safe_reg_write" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_upload: "safe_upload" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	



	

	

	
			c_xornamebuilder_build: "xornamebuilder_build" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_xornamebuilder_from: "xornamebuilder_from" [
				rt [int-ptr!] ;@@ TODO: async
				
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_xornamebuilder_from_str: "xornamebuilder_from_str" [
				rt [int-ptr!] ;@@ TODO: async
				
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_xornamebuilder_random: "xornamebuilder_random" [
				rt [int-ptr!] ;@@ TODO: async
				
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_xornamebuilder_with_bytes: "xornamebuilder_with_bytes" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_xornamebuilder_with_str: "xornamebuilder_with_str" [
				rt [int-ptr!] ;@@ TODO: async
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	



			init_runtime: "init_runtime" [
				return: [int-ptr!]
			]

			cstring_free: "cstring_free" [
				ptr [c-string!]
			]
			
			buffer_free: "buffer_free" [
				buf [buffer!]
			]
		]
	]
	
	tokio_runtime: init_runtime
]



; low-level routines

sn-ffi-result: function [v] [		;; unwrap() in Rust's terms
	if all [
		paren! = type? v
		"Err" = v/1
	] [
		probe v/2/1
		do make error! v/2/2
	]
	
	either all [
		paren! = type? v
		"Ok" = v/1
	] [
		v/2
	] [
		v
	]
]









safe_address: function [
	 ref [integer!] 
    
    ;; returns: Result<EvmAddress, Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce []
		'redbin

	probe length? params
	probe result_buf: r_safe_address
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_address: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_address
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_balance: function [
	 ref [integer!] 
    
    ;; returns: Result<(U256, U256), Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce []
		'redbin

	probe length? params
	probe result_buf: r_safe_balance
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_balance: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_balance
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_connect: function [
	
     peers			;; in rust: Vec<Multiaddr>
     add_network_peers			;; in rust: bool
     secret			;; in rust: Option<SecretKey>
     log_level			;; in rust: String
    
    ;; returns: Result<Safe, Error> unwrapped converted into handle!.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ peers  add_network_peers  secret  log_level ]
		'redbin

	probe length? params
	probe result_buf: r_safe_connect
		
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
	result: to integer! at reverse result 5 
]

r_safe_connect: routine [
	
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_connect
		tokio_runtime ;@@ TODO: async
		
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_download: function [
	 ref [integer!] 
     xorname			;; in rust: XorName
    
    ;; returns: Result<Vec<u8>, Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ xorname ]
		'redbin

	probe length? params
	probe result_buf: r_safe_download
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_download: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_download
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_login: function [
	 ref [integer!] 
     secret			;; in rust: Option<SecretKey>
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ secret ]
		'redbin

	probe length? params
	probe result_buf: r_safe_login
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_login: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_login
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_login_with_eth: function [
	 ref [integer!] 
     eth_privkey			;; in rust: Option<String>
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ eth_privkey ]
		'redbin

	probe length? params
	probe result_buf: r_safe_login_with_eth
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_login_with_eth: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_login_with_eth
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_log_level: function [
	 ref [integer!] 
     level			;; in rust: String
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ level ]
		'redbin

	probe length? params
	probe result_buf: r_safe_log_level
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_log_level: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_log_level
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_read_reg: function [
	 ref [integer!] 
     meta			;; in rust: &XorName
     version			;; in rust: Option<u32>
    
    ;; returns: Result<Vec<u8>, Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ meta  version ]
		'redbin

	probe length? params
	probe result_buf: r_safe_read_reg
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_read_reg: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_read_reg
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_reg_create: function [
	 ref [integer!] 
     data			;; in rust: &[u8]
     meta			;; in rust: &XorName
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ data  meta ]
		'redbin

	probe length? params
	probe result_buf: r_safe_reg_create
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_reg_create: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_reg_create
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_reg_write: function [
	 ref [integer!] 
     data			;; in rust: &[u8]
     meta			;; in rust: &XorName
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ data  meta ]
		'redbin

	probe length? params
	probe result_buf: r_safe_reg_write
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_reg_write: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_reg_write
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe_upload: function [
	 ref [integer!] 
     data			;; in rust: &[u8]
    
    ;; returns: Result<XorName, Error> unwrapped.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ data ]
		'redbin

	probe length? params
	probe result_buf: r_safe_upload
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_safe_upload: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_safe_upload
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]










xornamebuilder_build: function [
	 ref [integer!] 
    
    ;; returns: XorName.
] [
	params: to binary! ""
	save/as
		params
		probe reduce []
		'redbin

	probe length? params
	probe result_buf: r_xornamebuilder_build
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
]

r_xornamebuilder_build: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_xornamebuilder_build
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


xornamebuilder_from: function [
	
     xor_name			;; in rust: &XorName
    
    ;; returns: XorNameBuilder converted into handle!.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ xor_name ]
		'redbin

	probe length? params
	probe result_buf: r_xornamebuilder_from
		
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
	result: to integer! at reverse result 5 
]

r_xornamebuilder_from: routine [
	
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_xornamebuilder_from
		tokio_runtime ;@@ TODO: async
		
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


xornamebuilder_from_str: function [
	
     name			;; in rust: &str
    
    ;; returns: XorNameBuilder converted into handle!.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ name ]
		'redbin

	probe length? params
	probe result_buf: r_xornamebuilder_from_str
		
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
	result: to integer! at reverse result 5 
]

r_xornamebuilder_from_str: routine [
	
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_xornamebuilder_from_str
		tokio_runtime ;@@ TODO: async
		
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


xornamebuilder_random: function [
	
    
    ;; returns: XorNameBuilder converted into handle!.
] [
	params: to binary! ""
	save/as
		params
		probe reduce []
		'redbin

	probe length? params
	probe result_buf: r_xornamebuilder_random
		
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
	result: to integer! at reverse result 5 
]

r_xornamebuilder_random: routine [
	
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_xornamebuilder_random
		tokio_runtime ;@@ TODO: async
		
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


xornamebuilder_with_bytes: function [
	 ref [integer!] 
     name			;; in rust: &[u8]
    
    ;; returns: XorNameBuilder converted into handle!.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ name ]
		'redbin

	probe length? params
	probe result_buf: r_xornamebuilder_with_bytes
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
	result: to integer! at reverse result 5 
]

r_xornamebuilder_with_bytes: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_xornamebuilder_with_bytes
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


xornamebuilder_with_str: function [
	 ref [integer!] 
     name			;; in rust: &str
    
    ;; returns: XorNameBuilder converted into handle!.
] [
	params: to binary! ""
	save/as
		params
		probe reduce [ name ]
		'redbin

	probe length? params
	probe result_buf: r_xornamebuilder_with_str
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	result: probe sn-ffi-result result
	
	result: to integer! at reverse result 5 
]

r_xornamebuilder_with_str: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	print [tokio_runtime "^/"]
	 print [as int-ptr! ref "^/"] 
	print [binary/rs-head params "^/"]
	print [binary/rs-length? params "^/"]

	buffer: c_xornamebuilder_with_str
		tokio_runtime ;@@ TODO: async
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	print ["buffer: " buffer "^/"]
	print ["buffer data: " buffer/data "^/"]
	print ["buffer len: " buffer/len "^/"]
	
	ret: binary/load buffer/data buffer/len
	print ["ret: " ret "^/"]

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]





; hi-level code

to-vec-u8: function [
	key-bin [binary!]
	return: [block!]
] [
	key: copy []
	foreach b key-bin [
		append key b
	]
	reduce [key]
]



safe!: object [
	ref: none

	

	
	
	
	address: function [
	    
	    ;; returns: Result<EvmAddress, Error>
	] [
		safe_address
			 ref 
			
	]
	
	balance: function [
	    
	    ;; returns: Result<(U256, U256), Error>
	] [
		safe_balance
			 ref 
			
	]
	
	connect: function [
	     peers			;; in rust: Vec<Multiaddr>
	     add_network_peers			;; in rust: bool
	     secret			;; in rust: Option<SecretKey>
	     log_level			;; in rust: String
	    
	    ;; returns: Result<Safe, Error>
	] [
		safe_connect
			
			 peers
			 add_network_peers
			 secret
			 log_level
			
	]
	
	download: function [
	     xorname			;; in rust: XorName
	    
	    ;; returns: Result<Vec<u8>, Error>
	] [
		safe_download
			 ref 
			 xorname
			
	]
	
	login: function [
	     secret			;; in rust: Option<SecretKey>
	    
	    ;; returns: Result<(), Error>
	] [
		safe_login
			 ref 
			 secret
			
	]
	
	login_with_eth: function [
	     eth_privkey			;; in rust: Option<String>
	    
	    ;; returns: Result<(), Error>
	] [
		safe_login_with_eth
			 ref 
			 eth_privkey
			
	]
	
	log_level: function [
	     level			;; in rust: String
	    
	    ;; returns: Result<(), Error>
	] [
		safe_log_level
			 ref 
			 level
			
	]
	
	read_reg: function [
	     meta			;; in rust: &XorName
	     version			;; in rust: Option<u32>
	    
	    ;; returns: Result<Vec<u8>, Error>
	] [
		safe_read_reg
			 ref 
			 meta
			 version
			
	]
	
	reg_create: function [
	     data			;; in rust: &[u8]
	     meta			;; in rust: &XorName
	    
	    ;; returns: Result<(), Error>
	] [
		safe_reg_create
			 ref 
			 data
			 meta
			
	]
	
	reg_write: function [
	     data			;; in rust: &[u8]
	     meta			;; in rust: &XorName
	    
	    ;; returns: Result<(), Error>
	] [
		safe_reg_write
			 ref 
			 data
			 meta
			
	]
	
	upload: function [
	     data			;; in rust: &[u8]
	    
	    ;; returns: Result<XorName, Error>
	] [
		safe_upload
			 ref 
			 data
			
	]
	

]

xornamebuilder!: object [
	ref: none

	

	
	
	
	build: function [
	    
	    ;; returns: XorName
	] [
		xornamebuilder_build
			 ref 
			
	]
	
	from: function [
	     xor_name			;; in rust: &XorName
	    
	    ;; returns: XorNameBuilder
	] [
		xornamebuilder_from
			
			 xor_name
			
	]
	
	from_str: function [
	     name			;; in rust: &str
	    
	    ;; returns: XorNameBuilder
	] [
		xornamebuilder_from_str
			
			 name
			
	]
	
	random: function [
	    
	    ;; returns: XorNameBuilder
	] [
		xornamebuilder_random
			
			
	]
	
	with_bytes: function [
	     name			;; in rust: &[u8]
	    
	    ;; returns: XorNameBuilder
	] [
		xornamebuilder_with_bytes
			 ref 
			 name
			
	]
	
	with_str: function [
	     name			;; in rust: &str
	    
	    ;; returns: XorNameBuilder
	] [
		xornamebuilder_with_str
			 ref 
			 name
			
	]
	

]



safe: object [
	ref: none
	test: none

	
	init: does [
		probe "init"
; 		ref: safe_default
; 		print ref
		test: null-handle
		print test
	]
	
	connect: function [
	     peers			;; in rust: Vec<Multiaddr>
	     add_network_peers			;; in rust: bool
	     secret			;; in rust: Option<SecretKey>
	    
	    ;; returns: Result<(), Error>
	] [
		probe "connect"
; 		print self/ref
; 		print ref
; 		print self/test
		safe_connect
; 			 self/ref 
			 peers
			 add_network_peers
			 secret
			 "TRACE"
			
	]

]


build-xorname: function [
	from [word! binary! string!]	; use word `random as good practice
	names [block!]					; block of strings and binaries
	return: [binary!]				; xorname
] [
	builder-ref: switch type? from [
		word! [ xornamebuilder_random ]
		binary! [ xornamebuilder_from from ]
		string! [ xornamebuilder_from_str from ]
	]

	foreach name names [
		switch type? name [
			binary! [ xornamebuilder_with_bytes builder-ref name ]
			string! [ xornamebuilder_with_str builder-ref name ]
		]
	]

	xornamebuilder_build builder-ref
]
