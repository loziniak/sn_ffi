Red [
	 "This file is generated by %bindgen.red from %sn-ffi.tpl.red" 
]

#system [
	
	buffer!: alias struct! [
		data [byte-ptr!]
		len [integer!]
	]


	#import [

		"sn_ffi/target/i686-unknown-linux-gnu/debug/libsn_ffi.so" cdecl [
		


	
			c_safe_default: "safe_default" [
				return: [handle!]
			]

			c_safe_free: "safe_free" [
				ref [handle!]
			]
	

	

	
			c_safe_connect: "safe_connect" [
				rt [handle!]
				 ref [handle!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	



			init_runtime: "init_runtime" [
				return: [handle!]
			]

			cstring_free: "cstring_free" [
				ptr [c-string!]
			]
			
			buffer_free: "buffer_free" [
				buf [handle!]
			]
		]
	]
	
	tokio_runtime: init_runtime
]



; low-level routines

sn-ffi-result: function [v] [
	if all [
		paren! = type? v
		"Err" = v/1
	] [
		probe v/2/1
		do make error! v/2/2
	]
	
	either all [
		paren! = type? v
		"Ok" = v/1
	] [
		v/2
	] [
		v
	]
]




safe_default: routine [
	return: [handle!]
	/local ref
] [
	ref: handle/box as integer! c_safe_default
	as red-handle! SET_RETURN(ref)
]

safe_free: routine [
	ref [handle!]
] [
	c_safe_free as handle! ref/value
]






safe_connect: function [
	 ref [handle!] 
     peers			;; in rust: Vec<String>
     secret			;; in rust: Option<String>
    
] [
	params: to binary! ""
	save/as
		params
		reduce [ peers  secret ]
		'redbin

	probe length? params
	result_buf: r_safe_connect
		 ref 
		probe params
	result: probe load/as result_buf 'redbin
	sn-ffi-result result
]

r_safe_connect: routine [
	 ref [handle!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_connect
		tokio_runtime
		 as handle! ref/value 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len
	buffer_free as handle! buffer
	as red-binary! SET_RETURN(ret)
]





; hi-level code

to-vec-u8: function [
	key-bin [binary!]
	return: [block!]
] [
	key: copy []
	foreach b key-bin [
		append key b
	]
	reduce [key]
]



safe!: object [
	ref: none

	
	init: does [
		ref: safe_default
	]

	free: does [
		safe_free ref
		ref: none
	]
	

	
	
	
	connect: function [
	     peers			;; in rust: Vec<String>
	     secret			;; in rust: Option<String>
	    
	] [
		safe_connect
			 ref 
			 peers
			 secret
			
	]
	

]



