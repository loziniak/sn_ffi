Red [
	 "This file is generated by %bindgen.red from %sn-ffi.tpl.red" 
]

#system [
	
	buffer!: alias struct! [
		data [byte-ptr!]
		len [integer!]
	]


	#import [

		"sn_ffi/target/i686-unknown-linux-gnu/debug/libsn_ffi.so" cdecl [
		


	
			c_safe_free: "safe_free" [
				ref [int-ptr!]
			]

	

	
			c_safe_address: "safe_address" [
				
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_balance: "safe_balance" [
				 rt [int-ptr!] 
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_connect: "safe_connect" [
				 rt [int-ptr!] 
				
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_download: "safe_download" [
				 rt [int-ptr!] 
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_login: "safe_login" [
				
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_login_with_eth: "safe_login_with_eth" [
				
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_log_level: "safe_log_level" [
				
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_read_reg: "safe_read_reg" [
				 rt [int-ptr!] 
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_reg_create: "safe_reg_create" [
				 rt [int-ptr!] 
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_reg_write: "safe_reg_write" [
				 rt [int-ptr!] 
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	
			c_safe_upload: "safe_upload" [
				 rt [int-ptr!] 
				 ref [int-ptr!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	



			init_runtime: "init_runtime" [
				return: [int-ptr!]
			]

			cstring_free: "cstring_free" [
				ptr [c-string!]
			]
			
			buffer_free: "buffer_free" [
				buf [buffer!]
			]
		]
	]
	
	tokio_runtime: init_runtime
]



; low-level routines

sn-ffi-result: function [v] [		;; unwrap() in Rust's terms
	if all [
		paren! = type? v
		"Err" = v/1
	] [
		v/2/1
		do make error! v/2/2
	]
	
	either all [
		paren! = type? v
		"Ok" = v/1
	] [
		v/2
	] [
		v
	]
]





safe_free: routine [
	ref [integer!]
] [
	c_safe_free as int-ptr! ref
]





safe-address: function [
	 ref [integer!] 
    
    ;; returns: Result<EvmAddress, Error> unwrapped.
] [
	params-block: reduce []
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_address
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_address: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_address
		
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-balance: function [
	 ref [integer!] 
    
    ;; returns: Result<(U256, U256), Error> unwrapped.
] [
	params-block: reduce []
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_balance
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_balance: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_balance
		 tokio_runtime 
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-connect: function [
	
     peers			;; in rust: Vec<Multiaddr>
     add_network_peers			;; in rust: bool
     secret			;; in rust: Option<SecretKey>
     log_level			;; in rust: String
    
    ;; returns: Result<Safe, Error> unwrapped converted into integer!.
] [
	params-block: reduce [ peers  add_network_peers  secret  log_level ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_connect
		
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
	to integer! skip reverse result 4 
]

r_safe_connect: routine [
	
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_connect
		 tokio_runtime 
		
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-download: function [
	 ref [integer!] 
     xorname			;; in rust: XorName
    
    ;; returns: Result<Vec<u8>, Error> unwrapped.
] [
	params-block: reduce [ xorname ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_download
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_download: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_download
		 tokio_runtime 
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-login: function [
	 ref [integer!] 
     secret			;; in rust: Option<SecretKey>
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params-block: reduce [ secret ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_login
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_login: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_login
		
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-login-with-eth: function [
	 ref [integer!] 
     eth_privkey			;; in rust: Option<String>
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params-block: reduce [ eth_privkey ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_login_with_eth
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_login_with_eth: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_login_with_eth
		
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-log-level: function [
	 ref [integer!] 
     level			;; in rust: String
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params-block: reduce [ level ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_log_level
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_log_level: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_log_level
		
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-read-reg: function [
	 ref [integer!] 
     meta			;; in rust: &XorName
     version			;; in rust: Option<u32>
    
    ;; returns: Result<Vec<u8>, Error> unwrapped.
] [
	params-block: reduce [ meta  version ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_read_reg
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_read_reg: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_read_reg
		 tokio_runtime 
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-reg-create: function [
	 ref [integer!] 
     data			;; in rust: &[u8]
     meta			;; in rust: &XorName
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params-block: reduce [ data  meta ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_reg_create
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_reg_create: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_reg_create
		 tokio_runtime 
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-reg-write: function [
	 ref [integer!] 
     data			;; in rust: &[u8]
     meta			;; in rust: &XorName
    
    ;; returns: Result<(), Error> unwrapped.
] [
	params-block: reduce [ data  meta ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_reg_write
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_reg_write: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_reg_write
		 tokio_runtime 
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]


safe-upload: function [
	 ref [integer!] 
     data			;; in rust: &[u8]
    
    ;; returns: Result<XorName, Error> unwrapped.
] [
	params-block: reduce [ data ]
	params: to binary! ""
	save/as
		params
		either empty? params-block [
			none				;; to match Rust's (), which is deserialized from red's none instead of empty block.
		] [
			params-block
		]
		'redbin

	length? params
	result-buf: r_safe_upload
		 ref 
		params
	result: load/as result-buf 'redbin
	result: sn-ffi-result result
	
]

r_safe_upload: routine [
	 ref [integer!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_upload
		 tokio_runtime 
		 as int-ptr! ref 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len

	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]





; hi-level code

to-vec-u8: function [
	key-bin [binary!]
	return: [block!]
] [
	key: copy []
	foreach b key-bin [
		append key b
	]
	reduce [key]
]



safe!: object [
	ref: none

	
	free: does [
		safe_free ref
		ref: none
	]

	
	
	
	address: function [
	    
	    ;; returns: Result<EvmAddress, Error>
	] [
		safe-address
			 ref 
			
	]
	
	balance: function [
	    
	    ;; returns: Result<(U256, U256), Error>
	] [
		safe-balance
			 ref 
			
	]
	
	connect: function [
	     peers			;; in rust: Vec<Multiaddr>
	     add_network_peers			;; in rust: bool
	     secret			;; in rust: Option<SecretKey>
	     log_level			;; in rust: String
	    
	    ;; returns: Result<Safe, Error>
	] [
		self/ref: safe-connect
			
			 peers
			 add_network_peers
			 secret
			 log_level
			
	]
	
	download: function [
	     xorname			;; in rust: XorName
	    
	    ;; returns: Result<Vec<u8>, Error>
	] [
		safe-download
			 ref 
			 xorname
			
	]
	
	login: function [
	     secret			;; in rust: Option<SecretKey>
	    
	    ;; returns: Result<(), Error>
	] [
		safe-login
			 ref 
			 secret
			
	]
	
	login-with-eth: function [
	     eth_privkey			;; in rust: Option<String>
	    
	    ;; returns: Result<(), Error>
	] [
		safe-login-with-eth
			 ref 
			 eth_privkey
			
	]
	
	log-level: function [
	     level			;; in rust: String
	    
	    ;; returns: Result<(), Error>
	] [
		safe-log-level
			 ref 
			 level
			
	]
	
	read-reg: function [
	     meta			;; in rust: &XorName
	     version			;; in rust: Option<u32>
	    
	    ;; returns: Result<Vec<u8>, Error>
	] [
		safe-read-reg
			 ref 
			 meta
			 version
			
	]
	
	reg-create: function [
	     data			;; in rust: &[u8]
	     meta			;; in rust: &XorName
	    
	    ;; returns: Result<(), Error>
	] [
		safe-reg-create
			 ref 
			 data
			 meta
			
	]
	
	reg-write: function [
	     data			;; in rust: &[u8]
	     meta			;; in rust: &XorName
	    
	    ;; returns: Result<(), Error>
	] [
		safe-reg-write
			 ref 
			 data
			 meta
			
	]
	
	upload: function [
	     data			;; in rust: &[u8]
	    
	    ;; returns: Result<XorName, Error>
	] [
		safe-upload
			 ref 
			 data
			
	]
	

]

