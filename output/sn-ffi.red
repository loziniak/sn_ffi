Red [
	 "This file is generated by %bindgen.red from %sn-ffi.tpl.red" 
]

#system [
	
	buffer!: alias struct! [
		data [byte-ptr!]
		len [integer!]
	]


	#import [

		"sn_ffi/target/i686-unknown-linux-gnu/debug/libsn_ffi.so" cdecl [
		


	
			c_safe_default: "safe_default" [
				return: [handle!]
			]

			c_safe_free: "safe_free" [
				ref [handle!]
			]
	

	

	
			c_safe_connect: "safe_connect" [
				rt [handle!]
				ref [handle!] 
				params [byte-ptr!]
				params_size [integer!]
				return: [buffer!]
			]
	



			init_runtime: "init_runtime" [
				return: [handle!]
			]

			cstring_free: "cstring_free" [
				ptr [c-string!]
			]
			
			buffer_free: "buffer_free" [
				buf [handle!]
			]
		]
	]
	
	tokio_runtime: init_runtime
]



; low-level routines





safe_default: routine [
	return: [handle!]
	/local ref
] [
	ref: handle/box as integer! c_safe_default
	as red-handle! SET_RETURN(ref)
]

safe_free: routine [
	ref [handle!]
] [
	c_safe_free as handle! ref/value
]






safe_connect: function [
	ref [handle!] 
    peers			;; in rust: Vec<String>
    secret			;; in rust: Option<String>
    
] [
	params: to binary! ""
	save/as
		params
		reduce [ peers  secret ]
		'redbin

	probe length? params
	result_buf: r_safe_connect
		ref 
		probe params
]

r_safe_connect: routine [
	ref [handle!] 
	params [binary!]
	return: [binary!]		;-- redbin-encoded Result<usize, ErrorString> or Result<T, ErrorString>
	/local buffer ret
] [
	buffer: c_safe_connect
		tokio_runtime
		as handle! ref/value 
		binary/rs-head params
		binary/rs-length? params
	
	ret: binary/load buffer/data buffer/len
	buffer_free buffer
	as red-binary! SET_RETURN(ret)
]





; hi-level code

to-vec-u8: function [
	key-bin [binary!]
	return: [block!]
] [
	key: copy []
	foreach b key-bin [
		append key b
	]
	reduce [key]
]



safe!: object [
	ref: none

	
	init: does [
		ref: safe_default
	]

	free: does [
		safe_free ref
		ref: none
	]
	

	
]


safe!: make safe! [

	init: does [
; 		ref: safe_default
		ref: none
	]

	free: does [
; 		safe_free ref
		ref: none
	]

	connect: function [
		ip [tuple!]
		port [integer!]
	] [
		genesis-key: to-vec-u8 #{					
			8640 e62c c44e 75cf
			4fad c8ee 91b7 4b4c
			f0fd 2c09 84fb 0e3a
			b40f 0268 0685 7d8c
			41f0 1d37 2522 3c55
			b1ef 87d6 69f5 e2cc
		}

		safe_connect
			ref
			compose/deep [ ;bootstrap_config
				(genesis-key)
				[
					(rejoin [ip #":" port])
					(rejoin [ip #":" port + 1])		;-- NODES_TO_CONTACT_PER_STARTUP_BATCH = 3  @ safe_network/src/client/connections/messaging.rs
					(rejoin [ip #":" port + 2])
				]
			]
			none ;keypair
			none ;config_path
			["secs" 10 "nanos" 0] ;timeout
	]
]


client!: make client! [

	init: function [] [
		client_new
			[				;-- blsttc::SecretKey / blstrs::Scalar / blst::blst_fr (https://docs.rs/blst/0.3.11/blst/struct.blst_fr.html)
				"l" [
					#{8640 e62c c44e 75cf}
					#{4fad c8ee 91b7 4b4c}
					#{f0fd 2c09 84fb 0e3a}
					#{b40f 0268 0685 7d8c}
				]
			]
			[				;-- peers
				"/ip4/139.59.125.187/tcp/35163/p2p/12D3KooWE75czdXUnZJ59gtMDwNZCyBx24whf9WXbNTmEoCaiUrA"
			]
			["secs" 10 "nanos" 0] ;-- req_response_timeout
			none			;-- custom_concurrency_limit
	]

]

